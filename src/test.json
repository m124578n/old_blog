{
    "test": "test",
    "data": [
        {
            "id": 1,
            "title": "Django x Javascript不同寫法part1.",
            "short_content": "使用Django原生template和我以前使用的Javascript寫法",
            "date": "20230822",
            "content": [
                {
                    "type": "image",
                    "image": "1/1-1.jpg",
                    "link": "https://unsplash.com/photos/SyvsTmuuZyM",
                    "content": "source"
                },
                "前陣子看到了這個",
                {
                    "type": "link",
                    "content": "Youtube 影片",
                    "link": "https://www.youtube.com/watch?v=3vfum74ggHE&list=PLrgX5bzJJljqMbq7msQX4nzTtV3kqZOST"
                },
                "決定花了一點時間去研究練習Django網站的各種寫法，其中包括原生template、fetch、axios、react，後面其實都在寫Javascript居多，Python改成API後就沒事了XD。",
                "照著影片把最基本的Django template版本先做出來大概會長這樣",
                { 
                    "type": "code",
                    "language": "python",
                    "code":[
                        "\n# view.py",
                        "\n...",
                        "\n",
                        "\ndef index(request):",
                        "\n    todos = Todo.objects.all()",
                        "\n    return render(request, 'base.html', {'todo_list': todos})",
                        "\n",
                        "\n@require_http_methods(['POST'])",
                        "\ndef add(request):",
                        "\n    title = request.POST.get('title', '')",
                        "\n    todo = Todo(title=title)",
                        "\n    todo.save()",
                        "\n    return redirect('index')",
                        "\n",
                        "\ndef update(request, todo_id):",
                        "\n    todo = Todo.objects.get(id=todo_id)",
                        "\n    todo.complete = not todo.complete",
                        "\n    todo.save()",
                        "\n    return redirect('index')",
                        "\n",
                        "\ndef delete(request, todo_id):",
                        "\n    todo = Todo.objects.get(id=todo_id)",
                        "\n    todo.delete()",
                        "\n    return redirect('index')",
                        "\n",
                        "\n"
                        ]
                },
                "首頁＋增刪修，且任何動作都直接導回index做重新查詢",
                { 
                    "type": "code",
                    "language": "javascript",
                    "code":[
                        "\n// base.html",
                        "\n...",
                        "\n",
                        "\n<body>",
                        "\n    <div style=\"margin-top: 50px;\" class=\"ui container\">",
                        "\n        <h1 class=\"ui center aligned header\">To Do App</h1>",
                        "\n",
                        "\n        <form class=\"ui form\" action=\"/add\" method=\"post\">",
                        "\n        {% csrf_token %}",
                        "\n            <div class=\"field\">",
                        "\n                <label>Todo Title</label>",
                        "\n                <input type=\"text\" name=\"title\" placeholder=\"Enter Todo...\"><br>",
                        "\n            </div>",
                        "\n            <button class=\"ui blue button\" type=\"submit\">Add</button>",
                        "\n        </form>",
                        "\n",
                        "\n        <hr>",
                        "\n",
                        "\n        {% for todo in todo_list %}",
                        "\n        <div class=\"ui segment\">",
                        "\n            <p class=\"ui big header\">{{ todo.id }} | {{ todo.title }}</p>",
                        "\n",
                        "\n            {% if todo.complete == False %}",
                        "\n            <span class=\"ui gray label\">Not Complete</span>",
                        "\n            {% else %}",
                        "\n            <span class=\"ui green label\">Completed</span>",
                        "\n            {% endif %}",
                        "\n",
                        "\n            <a class=\"ui blue button\" href=\"/update/{{ todo.id }}\">Update</a>",
                        "\n            <a class=\"ui red button\" href=\"/delete/{{ todo.id }}\">Delete</a>",
                        "\n        </div>",
                        "\n        {% endfor %}",
                        "\n    </div>",
                        "\n</body>",
                        "\n",
                        "\n"
                        ]
                },
                "很簡單且基礎的Jinja2模板，但使用上面的程式碼寫出來的網站不管做什麼事都會重新整理一遍（導回index），現在ajax已經是基本要求了所以開改！",
                "首先先把Django改成API形式吧！這邊就沒用restful framework直接回json",
                {
                    "type": "code",
                    "language": "python",
                    "code":[
                        "\n# view.py",
                        "\n...",
                        "\n",
                        "\ndef index(request):",
                        "\n    return render(request, 'base.html')",
                        "\n",
                        "\ndef api(request):",
                        "\n    todos = Todo.objects.all()",
                        "\n    return JsonResponse({\"data\":list(todos.values())})",
                        "\n",
                        "\n@require_http_methods([\"POST\"])",
                        "\ndef add(request):",
                        "\n    body = request.body.decode(\"utf-8\")",
                        "\n    body = json.loads(body)",
                        "\n    title = body.get(\"title\", \"\")",
                        "\n    todo = Todo(title=title)",
                        "\n    todo.save()",
                        "\n    return JsonResponse({\"todo_id\": todo.id, \"complete\": todo.complete, \"todo_title\": todo.title})",
                        "\n",                        
                        "\ndef update(request, todo_id):",
                        "\n    todo = Todo.objects.get(id=todo_id)",
                        "\n    todo.complete = not todo.complete",
                        "\n    todo.save()",
                        "\n    return JsonResponse({\"todo_id\": todo_id, \"complete\": todo.complete})",
                        "\n",
                        "\ndef delete(request, todo_id):",
                        "\n    todo = Todo.objects.get(id=todo_id)",
                        "\n    todo.delete()",
                        "\n    return JsonResponse({\"todo_id\": todo_id})",
                        "\n",
                        "\n"
                    ]
                },
                "再來就是改base.html",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\n<body onload=\"get_all_list()\">",
                        "\n    <div style=\"margin-top: 50px;\" class=\"ui container\">",
                        "\n    <h1 class=\"ui center aligned header\">To Do App</h1>",
                        "\n",
                        "\n        <form class=\"ui form\">",
                        "\n            <div class=\"field\">",
                        "\n                <label>Todo Title</label>",
                        "\n                <input name=\"title\" id=\"title\" placeholder=\"Enter Todo...\" value=\"\"><br>",
                        "\n            </div>",
                        "\n            <button class=\"ui blue button\" type=\"button\" onclick=add()>Add</button>",
                        "\n        </form>",
                        "\n",
                        "\n        <hr>",
                        "\n        <div id=\"all\">",
                        "\n        </div>",
                        "\n",
                        "\n        <script>",
                        "\n            document.onkeydown = form_sumbit",
                        "\n",
                        "\n            function form_sumbit(e){",
                        "\n                the_event = e || window.event",
                        "\n                code = the_event.keyCode || the_event.which || the_event.charCode",
                        "\n                if (code == 13){",
                        "\n                    add()",
                        "\n                    return false",
                        "\n                }",
                        "\n                return true",
                        "\n            }",
                        "\n",
                        "\n            function get_all_list(){",
                        "\n                fetch(\"/api/\")",
                        "\n                .then(function (response){",
                        "\n                    return response.json()",
                        "\n                })",
                        "\n                .then(function (myJosn){",
                        "\n                    data = myJosn[\"data\"]",
                        "\n                    data.forEach(todo => {",
                        "\n                        html = \"\"",
                        "\n                        html += '<div id=\"all_todo'+todo.id+'\"> <div class=\"ui segment\"> '",
                        "\n                        html += '<p class=\"ui big header\">'+todo.id+' | '+todo.title+'</p> '",
                        "\n                        if (todo.complete){",
                        "\n                            html += '<span class=\"ui green label\" id=\"todo'+todo.id+'\">Completed</span>'",
                        "\n                        }",
                        "\n                        else{",
                        "\n                            html += '<span class=\"ui gray label\" id=\"todo'+todo.id+'\">Not Complete</span> '",
                        "\n                        }",
                        "\n                        html += '<a class=\"ui blue button\" onclick=update_(\"'+todo.id+'\")>Update</a> '",
                        "\n                        html += '<a class=\"ui red button\" onclick=delete_(\"'+todo.id+'\")>Delete</a> </div></div>'",
                        "\n                        document.querySelector(\"#all\").innerHTML += html",
                        "\n                    });",
                        "\n                })",
                        "\n            }",
                        "\n",
                        "\n            function add(){",
                        "\n                title = document.querySelector(\"#title\").value",
                        "\n                data = {",
                        "\n                    \"title\": title",
                        "\n                }",
                        "\n                fetch(\"/api/add/\", {",
                        "\n                    headers: { ",
                        "\n                        \"X-CSRFToken\": \"{{csrf_token}}\",",
                        "\n                        \"user-agent\": \"Mozilla/4.0 MDN Example\",",
                        "\n                        \"content-type\": \"application/json\", ",
                        "\n                    },",
                        "\n                    method: \"POST\", ",
                        "\n                    body: JSON.stringify(data),",
                        "\n                })",
                        "\n                .then(function (response){",
                        "\n                return response.json()",
                        "\n                })",
                        "\n                .then(function (myJson){",
                        "\n                    todo_id = myJson[\"todo_id\"]",
                        "\n                    complete = myJson[\"complete\"]",
                        "\n                    title = myJson[\"todo_title\"]",
                        "\n                    html = \"\"",
                        "\n                    html += '<div id=\"all_todo'+todo_id+'\"> <div class=\"ui segment\"> '",
                        "\n                    html += '<p class=\"ui big header\">'+todo_id+' | '+title+'</p> '",
                        "\n                    html += '<span class=\"ui gray label\" id=\"todo'+todo_id+'\">Not Complete</span> '",
                        "\n                    html += '<a class=\"ui blue button\" onclick=update_(\"'+todo_id+'\")>Update</a> '",
                        "\n                    html += '<a class=\"ui red button\" onclick=delete_(\"'+todo_id+'\")>Delete</a> </div></div>'",
                        "\n                    document.querySelector(\"#all\").innerHTML += html",
                        "\n                })",
                        "\n            }",
                        "\n",
                        "\n            function update_(todo_id){",
                        "\n                fetch(\"/api/update/\"+todo_id)",
                        "\n                .then(function (response){",
                        "\n                return response.json()",
                        "\n                })",
                        "\n                .then(function (myJson) {",
                        "\n                    todo_id = myJson[\"todo_id\"]",
                        "\n                    complete = myJson[\"complete\"]",
                        "\n                    ctodo_id = document.querySelector(\"#todo\"+todo_id)",
                        "\n                    if (complete){",
                        "\n                        ctodo_id.classList.remove(\"gray\")",
                        "\n                        ctodo_id.classList.add(\"green\")",
                        "\n                        ctodo_id.innerHTML = \"Completed\"",
                        "\n                    }",
                        "\n                    else{",
                        "\n                        ctodo_id.classList.remove(\"green\")",
                        "\n                        ctodo_id.classList.add(\"gray\")",
                        "\n                        ctodo_id.innerHTML = \"Not Complete\"",
                        "\n                    }",
                        "\n                })",
                        "\n            }",
                        "\n",
                        "\n            function delete_(todo_id){",
                        "\n                fetch(\"/api/delete/\"+todo_id)",
                        "\n                .then(function (response){",
                        "\n                return response.json()",
                        "\n                })",
                        "\n                .then(function (myJson) {",
                        "\n                    todo_id = myJson[\"todo_id\"]",
                        "\n                    this_node = document.querySelector(\"#all_todo\"+id)",
                        "\n                    this_node.parentElement.removeChild(this_node)",
                        "\n                })",
                        "\n            }",
                        "\n        </script>",
                        "\n    </div>",
                        "\n</body>",
                        "\n",
                        "\n"
                    ]
                },
                "WOW變超多的，我們一個一個拆開來看吧",
                "首先先來看看get_all_list做了什麼",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\nfunction get_all_list(){",
                        "\n    fetch(\"/api/\")",
                        "\n    .then(function (response){",
                        "\n        return response.json()",
                        "\n    })",
                        "\n    .then(function (myJosn){",
                        "\n        data = myJosn[\"data\"]",
                        "\n        data.forEach(todo => {",
                        "\n            html = \"\"",
                        "\n            html += '<div id=\"all_todo'+todo.id+'\"> <div class=\"ui segment\"> '",
                        "\n            html += '<p class=\"ui big header\">'+todo.id+' | '+todo.title+'</p> '",
                        "\n            if (todo.complete){",
                        "\n                html += '<span class=\"ui green label\" id=\"todo'+todo.id+'\">Completed</span>'",
                        "\n            }",
                        "\n            else{",
                        "\n                html += '<span class=\"ui gray label\" id=\"todo'+todo.id+'\">Not Complete</span> '",
                        "\n            }",
                        "\n            html += '<a class=\"ui blue button\" onclick=update_(\"'+todo.id+'\")>Update</a> '",
                        "\n            html += '<a class=\"ui red button\" onclick=delete_(\"'+todo.id+'\")>Delete</a> </div></div>'",
                        "\n            document.querySelector(\"#all\").innerHTML += html",
                        "\n        });",
                        "\n    })",
                        "\n}",
                        "\n",
                        "\n"
                    ]
                },
                "fetch把過去後回來的response要先過一層json才能使用，而這個就是把原先{% for %}迴圈拆成js的forEach去寫把每個todo串出來",
                "然後是新增",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\nfunction add(){",
                        "\n    title = document.querySelector(\"#title\").value",
                        "\n    data = {",
                        "\n        \"title\": title",
                        "\n    }",
                        "\n    fetch(\"/api/add/\", {",
                        "\n        headers: { ",
                        "\n            \"X-CSRFToken\": \"{{csrf_token}}\",",
                        "\n            \"user-agent\": \"Mozilla/4.0 MDN Example\",",
                        "\n            \"content-type\": \"application/json\", ",
                        "\n        },",
                        "\n        method: \"POST\", ",
                        "\n        body: JSON.stringify(data),",
                        "\n    })",
                        "\n    .then(function (response){",
                        "\n    return response.json()",
                        "\n    })",
                        "\n    .then(function (myJson){",
                        "\n        todo_id = myJson[\"todo_id\"]",
                        "\n        complete = myJson[\"complete\"]",
                        "\n        title = myJson[\"todo_title\"]",
                        "\n        html = \"\"",
                        "\n        html += '<div id=\"all_todo'+todo_id+'\"> <div class=\"ui segment\"> '",
                        "\n        html += '<p class=\"ui big header\">'+todo_id+' | '+title+'</p> '",
                        "\n        html += '<span class=\"ui gray label\" id=\"todo'+todo_id+'\">Not Complete</span> '",
                        "\n        html += '<a class=\"ui blue button\" onclick=update_(\"'+todo_id+'\")>Update</a> '",
                        "\n        html += '<a class=\"ui red button\" onclick=delete_(\"'+todo_id+'\")>Delete</a> </div></div>'",
                        "\n        document.querySelector(\"#all\").innerHTML += html",
                        "\n    })",
                        "\n}",
                        "\n",
                        "\n"
                    ]
                },
                "使用fetch把input data丟過去，那Django會需要加上csrf_token，接回來的值一樣先過一層json就可以對裡面的資料做處理，就把剛剛新增的再往下加一筆",
                "接著delete和update就一起吧",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\nfunction update_(todo_id){",
                        "\n    fetch(\"/api/update/\"+todo_id)",
                        "\n    .then(function (response){",
                        "\n    return response.json()",
                        "\n    })",
                        "\n    .then(function (myJson) {",
                        "\n        todo_id = myJson[\"todo_id\"]",
                        "\n        complete = myJson[\"complete\"]",
                        "\n        ctodo_id = document.querySelector(\"#todo\"+todo_id)",
                        "\n        if (complete){",
                        "\n            ctodo_id.classList.remove(\"gray\")",
                        "\n            ctodo_id.classList.add(\"green\")",
                        "\n            ctodo_id.innerHTML = \"Completed\"",
                        "\n        }",
                        "\n        else{",
                        "\n            ctodo_id.classList.remove(\"green\")",
                        "\n            ctodo_id.classList.add(\"gray\")",
                        "\n            ctodo_id.innerHTML = \"Not Complete\"",
                        "\n        }",
                        "\n    })",
                        "\n}",
                        "\n",
                        "\nfunction delete_(todo_id){",
                        "\n    fetch(\"/api/delete/\"+todo_id)",
                        "\n    .then(function (response){",
                        "\n    return response.json()",
                        "\n    })",
                        "\n    .then(function (myJson) {",
                        "\n        todo_id = myJson[\"todo_id\"]",
                        "\n        this_node = document.querySelector(\"#all_todo\"+id)",
                        "\n        this_node.parentElement.removeChild(this_node)",
                        "\n    })",
                        "\n}",
                        "\n",
                        "\n"
                    ]
                },
                "update一樣丟fetch看你要改哪一個todo id，回傳值再去判斷哪一個id要變成的相對應顏色，而delete就是直接移除那一整個子節點",
                "以上是我原先都在使用的方式，也很常混著寫Jinja2 x Javascript的寫法，接著去稍微看了一下別人怎麼串React後又在網路上爬了一些文章看到一些不同的寫法，React的state和components挺有趣的，下次再來介紹第二版，為axios＋components＋state的概念用純JS做的一版～"
            ]
        },
        {
            "id": 2,
            "title": "Line-Bot串接Line-Notify實現跨群組轉播",
            "short_content": "我需要把一個Line群組的訊息轉發到另一個Line群組．．．",
            "date": "20230723",
            "content": [
                {
                    "type": "image",
                    "image": "2/2-1.webp",
                    "link": "https://unsplash.com/photos/SyvsTmuuZyM",
                    "content": "source"
                },
                "我對自己提了一個需求，我需要把一個Line群組的訊息轉發到另一個Line群組，大概要做一個月，就覺得每天這樣手動傳太麻煩了，於是乎我決定做一個Line-Bot來幫我處理這件事吧。",
                "首先先研究了Line-Bot要怎麼接收訊息於是google",
                {
                    "type": "link",
                    "content": "LINE BOT 教學",
                    "link": "https://steam.oxxostudio.tw/category/python/example/line-bot.html"
                },
                "這篇大致上有完整的基礎教學，開始抄功課吧！！",
                {
                    "type": "code",
                    "language": "python",
                    "code": [
                        "\nfrom flask import Flask, request",
                        "\nimport json",
                        "\nimport config",
                        "\nfrom linebot import LineBotApi, WebhookHandler",
                        "\nfrom linebot.exceptions import InvalidSignatureError",
                        "\nfrom linebot.models import MessageEvent, TextMessage, TextSendMessage",
                        "\n",
                        "\napp = Flask(__name__)",
                        "\n",
                        "\n",
                        "\n@app.route('/', methods=['POST'])",
                        "\ndef hello(name=None):",
                        "\n    body = request.get_data(as_text=True)",
                        "\n    try:",
                        "\n        json_data = json.loads(body)  # json 格式化訊息內容",
                        "\n        access_token = config.CHANNEL_ACCESS_TOKEN",
                        "\n        secret = config.CHANNEL_SECRET",
                        "\n        line_bot_api = LineBotApi(access_token)  # 確認 token 是否正確",
                        "\n        handler = WebhookHandler(secret)  # 確認 secret 是否正確",
                        "\n        signature = request.headers['X-Line-Signature']  # 加入回傳的 headers",
                        "\n        handler.handle(body, signature)  # 綁定訊息回傳的相關資訊",
                        "\n        token = json_data['events'][0]['replyToken']  # 取得回傳訊息的 Token",
                        "\n        message_type = json_data['events'][0]['message']['type']  # 取得 LINe 收到的訊息類型",
                        "\n        if message_type == 'text':",
                        "\n            msg = json_data['events'][0]['message']['text']  # 取得 LINE 收到的文字訊息",
                        "\n            line_bot_api.reply_message(tk,TextSendMessage(msg)) # 這邊會回覆傳進來的訊息",
                        "\n        if message_type == 'image':",
                        "\n            msg_id = json_data['events'][0]['message']['id']",
                        "\n            message_content = line_bot_api.get_message_content(msg_id)  # Line的圖片要透過ID去找",
                        "\n            with open(f'{msg_id}.jpg', 'wb') as fd:",
                        "\n                fd.write(message_content.content)  # 這邊把圖片存下來",
                        "\n    except:",
                        "\n        print(body)  # 如果發生錯誤，印出收到的內容",
                        "\n    return 'OK'",
                        "\n",
                        "\n"
                    ]
                },
                "這邊只是簡單的測試Line-Bot能不能順利地接受文字和圖片，程式碼的部分上面是這樣，在來要去Line Developer設定機器人取得上面兩個參數：",
                "1. Channel_Access_Token",
                "2. Channel_Secret",
                "首先先進入",
                {
                    "type": "link",
                    "content": "LINE Developers",
                    "link": "https://developers.line.biz/zh-hant/"
                },
                "然後去點先new channel再點選Messaging API",
                {
                    "type": "image",
                    "image": "2/2-2.webp",
                    "link": "",
                    "content": ""
                },
                "",
                {
                    "type": "image",
                    "image": "2/2-3.webp",
                    "link": "",
                    "content": ""
                },
                "",
                {
                    "type": "image",
                    "image": "2/2-4.webp",
                    "link": "",
                    "content": ""
                },
                "把該填的資料填一填就會獲得一個機器人囉～而在機器人的Basic Setting中可以找到Channel Secret，然後在Messaging API 可以加機器人好友以及找到Channel Access Token",
                "完成上述的步驟把那兩個參數加上去後就完成了啦（（還早還早上面那些步驟弄完了，還差一台Server去把我的機器人部署上去並且要給一個https的網址丟給Line-Bot的Webhook這樣才算完成～",
                {
                    "type": "image",
                    "image": "2/2-5.webp",
                    "link": "",
                    "content": ""
                },
                "然後我就想去找個免費的平台用！低成本製作能不花錢則不花錢！",
                "於是我找到了fly.io",
                {
                    "type": "link",
                    "content": "fly.io",
                    "link": "https://fly.io/"
                },
                "fly.io有提供一些免費的空間，詳細就請自行觀看免費方案。",
                "由於我是寫Python所以用google搜尋 fly io python找到了",
                {
                    "type": "link",
                    "content": "Run a Python App",
                    "link": "https://fly.io/docs/languages-and-frameworks/python/"
                },
                "趕緊拿來改寫，改寫完後在使用fly.io部署的步驟就完成啦！！",
                "fly.io在使用前記得要安裝唷～",
                "然後照著上面的步驟使用：",
                "1. flyctl launch",
                "2. flyctl deploy",
                "3. 更新則使用 flyctl deploy — update-only",
                "基本上上述就可以完成一個只會回覆訊息的Line-Bot機器人囉！！",
                "然而我的需求不只是要一個只會回覆訊息的機器人（誰會需要這樣的機器人XD）我還需要讓這個機器人幫我轉傳訊息！",
                "於是找到了Line-Notify～",
                {
                    "type": "image",
                    "image": "2/2-9.png",
                    "link": "",
                    "content": ""
                },
                "Line-Notify，其實簡單的說就是打Line的API就可能傳訊息！",
                "以Python來說就是打requests請求，上code",
                {
                    "type": "code",
                    "language": "python",
                    "code": [
                        "\nimport requests",
                        "\n",
                        "\ndef line_notify_message(msg):",
                        "\n    token = config.TOKEN",
                        "\n",
                        "\n    # HTTP 標頭參數與資料",
                        "\n    headers = {\"Authorization\": \"Bearer \" + token}",
                        "\n    data = {'message': msg}",
                        "\n",
                        "\n    # 以 requests 發送 POST 請求",
                        "\n    requests.post(\"https://notify-api.line.me/api/notify\",headers=headers, data=data)",
                        "\n",
                        "\n"
                    ]
                },
                "而token怎麼來去Line-Notify登錄一個服務吧",
                {
                    "type": "link",
                    "content": "LINE Notify",
                    "link": "https://notify-bot.line.me/zh_TW/"
                },
                "",
                {
                    "type": "image",
                    "image": "2/2-7.webp",
                    "link": "",
                    "content": ""
                },
                "那下面那個Callback URL當然就是填入Line-Bot的Webhook也就是你個Server的所在處囉～",
                "登錄完服務就來註冊權杖囉～",
                {
                    "type": "image",
                    "image": "2/2-8.webp",
                    "link": "",
                    "content": ""
                },
                "權杖註冊就會給你一個Token，把這個Token丟到剛剛的程式碼中就能傳了！",
                "完整的程式碼如下：",
                {
                    "type": "code",
                    "language": "python",
                    "code": [
                        "\nfrom flask import Flask, render_template, request",
                        "\nimport json",
                        "\nimport config",
                        "\nfrom linebot import LineBotApi, WebhookHandler",
                        "\nimport requests",
                        "\nfrom linebot.exceptions import InvalidSignatureError",
                        "\n",
                        "\napp = Flask(__name__)",
                        "\n",
                        "\n",
                        "\n@app.route('/', methods=['POST'])",
                        "\ndef hello(name=None):",
                        "\n    body = request.get_data(as_text=True)",
                        "\n    try:",
                        "\n        json_data = json.loads(body)  # json 格式化訊息內容",
                        "\n        access_token = config.CHANNEL_ACCESS_TOKEN",
                        "\n        secret = config.CHANNEL_SECRET",
                        "\n        line_bot_api = LineBotApi(access_token)  # 確認 token 是否正確",
                        "\n        handler = WebhookHandler(secret)  # 確認 secret 是否正確",
                        "\n        signature = request.headers['X-Line-Signature']  # 加入回傳的 headers",
                        "\n        handler.handle(body, signature)  # 綁定訊息回傳的相關資訊",
                        "\n        token = json_data['events'][0]['replyToken']  # 取得回傳訊息的 Token",
                        "\n        message_type = json_data['events'][0]['message']['type']  # 取得 LINe 收到的訊息類型",
                        "\n        if message_type == 'text':",
                        "\n            msg = json_data['events'][0]['message']['text']  # 取得 LINE 收到的文字訊息",
                        "\n            line_notify_message(msg)",
                        "\n        if message_type == 'image':",
                        "\n            msg_id = json_data['events'][0]['message']['id']",
                        "\n            message_content = line_bot_api.get_message_content(msg_id)",
                        "\n            with open(f'{msg_id}.jpg', 'wb') as fd:  # /workspace/{msg_id}.jpg",
                        "\n                fd.write(message_content.content)",
                        "\n            line_notify_image(msg_id)",
                        "\n    except:",
                        "\n        print(body)  # 如果發生錯誤，印出收到的內容",
                        "\n    return 'OK'",
                        "\n",
                        "\n",
                        "\ndef line_notify_message(msg):",
                        "\n    token = config.TOKEN",
                        "\n",
                        "\n    # HTTP 標頭參數與資料",
                        "\n    headers = {\"Authorization\": \"Bearer \" + token}",
                        "\n    data = {'message': msg}",
                        "\n",
                        "\n    # 以 requests 發送 POST 請求",
                        "\n    requests.post(\"https://notify-api.line.me/api/notify\",",
                        "\n                headers=headers, data=data)",
                        "\n",
                        "\n",
                        "\ndef line_notify_image(msg_id):",
                        "\n    token = config.TOKEN",
                        "\n",
                        "\n    # 要發送的訊息",
                        "\n    message = '這是用 Python 發送的訊息與圖片'",
                        "\n",
                        "\n    # HTTP 標頭參數與資料",
                        "\n    headers = {\"Authorization\": \"Bearer \" + token}",
                        "\n    data = {'message': message}",
                        "\n",
                        "\n    # 要傳送的圖片檔案",
                        "\n    image = open(f'/workspace/{msg_id}.jpg', 'rb')",
                        "\n    files = {'imageFile': image}",
                        "\n",
                        "\n    # 以 requests 發送 POST 請求",
                        "\n    requests.post(\"https://notify-api.line.me/api/notify\", headers=headers, data=data, files=files)",
                        "\n",
                        "\n"
                    ]
                },
                "因為是簡單的服務，程式碼方面我就沒那麼多要求了～請大家多見諒～也可以自己嘗試優化程式碼！！",
                "以上就是今天的簡單Line-Bot串Line-Notify介紹以及實作～"
            ]
        },
        {
            "id": 3,
            "title": "Git CICD with Docker",
            "short_content": "Docker是一個容器化服務，他可以在一台電腦中切出好幾個環境分別執行不同的任務．．．",
            "date": "20230318",
            "content": [
                {
                    "type": "image",
                    "image": "3/3-1.webp",
                    "link": "https://1000logos.net/docker-logo/",
                    "content": "source"
                },
                "前言：",
                "這個主題是在水球軟體學院中舉辦的Docker共學會最終回的成果發表文章，本人我也是第一次寫文章，主要目的應該會著重在自己的一個紀錄，內容如果不是那麼正確還請多多包容和指點以下正篇。",
                "",
                "正篇：",
                "Docker是一個容器化服務，他可以在一台電腦中切出好幾個環境分別執行不同的任務。",
                "這邊會進行一個簡單的web server然後執行Github actions 或 Gitlab CICD達成自動化測試以及自動化部署。",
                "稍後將會介紹到的項目有以下幾樣：",
                "1. Dockerfile",
                "2. docker-compose.yml",
                "3. github/workflows 中的yml檔",
                "首先最基本的要架設一個網站會需要的服務為web server和database。",
                "那們我將會以Python Django串接Nginx做為web server那database是使用Django預設的sqlite簡單演示。",
                "資料夾階層會長這樣",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\n+根目錄",
                        "\n|",
                        "\n+-+nginx/",
                        "\n|      |",
                        "\n|      +--Dockerfile",
                        "\n|      +--docker-nginx-web.conf",
                        "\n|      +--nginx.conf",
                        "\n+-+web/",
                        "\n|     |",
                        "\n|     +--Dockerfile",
                        "\n|     +--requirements.txt",
                        "\n|     +-+app/以下略",
                        "\n|",
                        "\n+--docker-compose.yml",
                        "\n",
                        "\n"
                    ]
                },
                "這是Django也就是web裡面的Dockerfile",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\nFROM python:3.8.5",
                        "\nLABEL maintainer=\"xxxx@gmail.com\"",
                        "\n",
                        "\nWORKDIR /web",
                        "\nCOPY . /web/",
                        "\n",
                        "\nRUN pip install --upgrade pip ",
                        "\nRUN pip install -r requirements.txt",
                        "\n",
                        "\nWORKDIR /web/app",
                        "\n",
                        "\nVOLUME /web",
                        "\n",
                        "\nEXPOSE 8001",
                        "\n",
                        "\n"
                    ]
                },
                "再來是nginx裡面的Dockerfile",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\nFROM nginx:latest",
                        "\nLABEL maintainer=\"xxxx@gmail.com\"",
                        "\n",
                        "\n",
                        "\nCOPY nginx.conf /etc/nginx/nginx.conf",
                        "\nCOPY docker-nginx-web.conf /etc/nginx/sites-available/",
                        "\n",
                        "\nRUN mkdir -p /etc/nginx/sites-enabled/ && \\",
                        "\n    ln -s /etc/nginx/sites-available/docker-nginx-web.conf /etc/nginx/sites-enabled/",
                        "\n",
                        "\nCMD [\"nginx\", \"-g\", \"daemon off;\"]",
                        "\n",
                        "\n"
                    ]
                },
                "然後是根目錄下的docker-compose.yml",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\nversion: '3.8'",
                        "\n",
                        "\nservices:",
                        "\n        app_web:",
                        "\n                build: ./web",
                        "\n                container_name: app_web",
                        "\n                restart: always",
                        "\n                command: [\"/bin/bash\",\"-c\",\"uwsgi --ini uwsgi.ini\"]",
                        "\n                volumes:",
                        "\n                        - web_data:/web/app",
                        "\n                ports:",
                        "\n                        - \"8001:8001\"",
                        "\n                environment:",
                        "\n                        - PYTHONUNBUFFERED=TURE",
                        "\n        app_nginx:",
                        "\n                build: ./nginx",
                        "\n                container_name: app_nginx",
                        "\n                restart: always",
                        "\n                volumes:",
                        "\n                        - web_data:/web/app",
                        "\n                ports:",
                        "\n                        - \"80:80\"",
                        "\n                depends_on:",
                        "\n                        - app_web",
                        "\nvolumes:",
                        "\n        web_data:",
                        "\n",
                        "\n"
                    ]
                },
                "那我們這邊docker-compose.yml裡面的build會去找尋web和nginx目錄下的Dockerfile並根據Dockerfile的內容去啟動container。",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\ndocker-compose up --build -d",
                        "\n",
                        "\n"
                    ]
                },
                "就會直接把兩個container建立起來了。",
                "然後就可以開始寫Github actions的yml檔囉！",
                "我們到Github的頁面點選Actions",
                {
                    "type": "image",
                    "image": "3/3-2.webp",
                    "link": "",
                    "content": ""
                },
                "點選下方的Configure就會先幫你建立一個預設的yml",
                {
                    "type": "image",
                    "image": "3/3-3.webp",
                    "link": "",
                    "content": ""
                },
                "這邊就可以開始編輯自己的yml檔，但是Github上也有很多已經編輯好的yml檔會出現在Configure下方可以選用。",
                {
                    "type": "image",
                    "image": "3/3-4.webp",
                    "link": "",
                    "content": ""
                },
                "那這邊我就先用預設的yml來編輯",
                "那預設的yml呢它上面會有很詳細的註解說明每一個指令的功用，這邊只截取我需要的部分把它改寫成這樣",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\nname: Django CI",
                        "\n",
                        "\non:",
                        "\npush:",
                        "\n    branches: [ \"main\" ]",
                        "\npull_request:",
                        "\n    branches: [ \"main\" ]",
                        "\n",
                        "\njobs:",
                        "\nbuild:",
                        "\n    runs-on: ubuntu-latest",
                        "\n    strategy:",
                        "\n    max-parallel: 4",
                        "\n    matrix:",
                        "\n        python-version: [3.8]",
                        "\n    steps:",
                        "\n    - uses: actions/checkout@v3",
                        "\n    - name: Set up Python ${{ matrix.python-version }}",
                        "\n    uses: actions/setup-python@v3",
                        "\n    with:",
                        "\n        python-version: ${{ matrix.python-version }}",
                        "\n    - name: Install Dependencies",
                        "\n    run: |",
                        "\n        python -m pip install --upgrade pip",
                        "\n        pip install -r web/requirements.txt",
                        "\n    - name: Run Tests",
                        "\n    run: |",
                        "\n        python  web/app/manage.py test"
                    ]
                },
                "這邊是當你對這個repositories有push或是pull_request的時候就會觸發job的程序，上面那邊有${{matrix.python-version}}是我們可以對他執行多個版本的測試，這邊我只有跑一個python 3.8，那我們看到最後一行，這個就只是在跑Django的測試內容。",
                "接下來是測試通過後要把這整包部署到你指定的位置上也就是CD的部分",
                {
                    "type": "code",
                    "language": "bash",
                    "code": [
                        "\nname: Django CD",
                        "\n# 只有在 CI 的 workflow 完成時才會執行此 workflow",
                        "\n# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run",
                        "\non:",
                        "\nworkflow_run:",
                        "\n    workflows: [ Django CI ]",
                        "\n    types:",
                        "\n    - completed",
                        "\n",
                        "\njobs:",
                        "\ndeploy:",
                        "\n    runs-on: ubuntu-latest",
                        "\n",
                        "\n    # 注意前面 workflow_run 的 completed 意思是「完成」，不論執行結果成功或是失敗都算是「完成」",
                        "\n    # 但是一般來說測試如果失敗就應該暫停部屬至正式環境",
                        "\n    # 因此這裡加上一個 if 判斷，只有 CI 成功才會執行此 workflow",
                        "\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run",
                        "\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}",
                        "\n    ",
                        "\n    steps:",
                        "\n    # 使用 appleboy/ssh-action@master 這個 action 遠端連線至正式環境",
                        "\n    # https://github.com/appleboy/ssh-action",
                        "\n    - name: Deployment",
                        "\n        uses: appleboy/ssh-action@master",
                        "\n        with:",
                        "\n        host: ${{ secrets.HOST }}",
                        "\n        key: ${{ secrets.TOKEN }}",
                        "\n        username: ec2-user",
                        "\n        # 執行部屬的指令",
                        "\n        #docker rmi -f $(docker images -q  -f dangling=true)",
                        "\n        #docker volume rm $(docker volume ls -q -f dangling=true)",
                        "\n        script: | ",
                        "\n            whoami",
                        "\n        ",
                        "\n            sudo yum -y install docker",
                        "\n            sudo yum -y install git ",
                        "\n            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose",
                        "\n            sudo chmod 777 /usr/local/bin/docker-compose",
                        "\n            docker-compose version",
                        "\n            cd ~",
                        "\n            sudo rm -fr *",
                        "\n            sudo git clone https://github.com/xxx/testCICD.git",
                        "\n            cd testCICD",
                        "\n            sudo systemctl restart docker",
                        "\n            sudo chmod 777 /var/run/docker.sock",
                        "\n            docker-compose down",
                        "\n            docker rmi -f $(docker images -q  -f dangling=true)",
                        "\n            docker volume rm $(docker volume ls -q -f dangling=true)",
                        "\n            docker-compose up --build -d "
                    ]
                },
                "這邊我是參考了appleboy的ssh-action，這樣就可以透過ssh的方式連接到你的機器裡做上面所寫好的script了，那上面有兩個地方應該會有問題就是host跟key那兩個變數的新增位置在Settings",
                {
                    "type": "image",
                    "image": "3/3-5.webp",
                    "link": "",
                    "content": ""
                },
                "裡面的Security點開Secrets and variables中的Actions",
                {
                    "type": "image",
                    "image": "3/3-6.webp",
                    "link": "",
                    "content": ""
                },
                "你會看到",
                {
                    "type": "image",
                    "image": "3/3-7.webp",
                    "link": "",
                    "content": ""
                },
                "這邊就可以管理你在Github actions中的任何密鑰以及變數。",
                "這邊這個CICD最終會部署到我在AWS EC2中架設的一個小機器裡面，裡頭還有很多細節也有很多我還沒搞清楚的地方，之後有機會在拆分主題來一一探討。",
                "最後，我是一個轉職的工程師，目前剛轉滿半年多一點，還在努力學習中，如果有任何問題或建議都可以私訊我m23568n@gmail.com，我也常在",
                {
                    "type": "link",
                    "content": "水球軟體學院",
                    "link": "https://discord.gg/waterballsa"
                },
                "歡迎大家一起加入這個大社群一起學習一起進步！！"
            ]
        },
        {
            "id": 4,
            "title": "Django x Javascript不同寫法part2.",
            "short_content": "更新State的方式進行JS渲染",
            "date": "20230827",
            "content": [
                {
                    "type": "image",
                    "image": "4/4-1.jpeg",
                    "link": "https://unsplash.com/photos/m_HRfLhgABo",
                    "content": "source"
                },
                "上次的文章中是我以前常用的寫法，而今天要說的是我前陣子看到這篇文章發現的新大陸",
                {
                    "type": "link",
                    "content": "前端框架－先別急著學React",
                    "link": "https://hackmd.io/@Heidi-Liu/note-fe302-review"
                },
                "我覺得挺有趣的就試著把上次那版改成這種方式下去實作！",
                "Django的程式碼跟上週一樣所以今天不會有python的code，就請參考上篇文章！！",
                {
                    "type": "link",
                    "content": "Django x Javascript不同寫法part1.",
                    "link": "https://m124578n.github.io/MyBlog/#/Django%20x%20Javascript%E4%B8%8D%E5%90%8C%E5%AF%AB%E6%B3%95part1."
                },
                "那這次我是使用axios跟fetch大同小異，只是需要而外安裝（引入）也有使用到一些JQuery，話不多說先上code吧～",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\n<script src=\"https://code.jquery.com/jquery-3.7.0.js\" integrity=\"sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=\" crossorigin=\"anonymous\"></script>",
                        "\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>",
                        "\n//....",
                        "\n",
                        "\nlet state = {",
                        "\n    todos: []",
                        "\n}",
                        "\n",
                        "\nfunction get_all_list(){",
                        "\n    axios.get(\"/api/\")",
                        "\n        .then(response => {",
                        "\n            response.data.data.forEach(todo => {",
                        "\n                state = {",
                        "\n                    todos: [...state.todos, {",
                        "\n                        id: todo.id,",
                        "\n                        content: todo.title,",
                        "\n                        isDone: todo.complete",
                        "\n                    }]",
                        "\n                }",
                        "\n            })",
                        "\n            updateState(state)",
                        "\n        })",
                        "\n    }",
                        "\n",
                        "\n// 更新 state",
                        "\nfunction updateState(newState) {",
                        "\n    state = newState;",
                        "\n    render()",
                        "\n}",
                        "\n",
                        "\n// state => UI",
                        "\nfunction render() {",
                        "\n    // 先把畫面清空",
                        "\n    $('.todos').empty();",
                        "\n    console.log(state.todos)",
                        "\n    $('.todos').append(",
                        "\n    // 把每個 todo 的 HTML 集合起來放到畫面上",
                        "\n    state.todos.map(todo => Todo(todo)).join('')",
                        "\n    );",
                        "\n}",
                        "\n",
                        "\n// Todo component",
                        "\nfunction Todo({id, content, isDone}) {",
                        "\n    return `",
                        "\n    <div class=\"ui segment todo\" data-id=\"${id}\">",
                        "\n        <p class=\"ui big header\"> ${id} | ${content} </p>",
                        "\n",
                        "\n        ${Span({",
                        "\n            className: isDone ? 'ui green label' : 'ui gray label',",
                        "\n            content: isDone ? 'Complete' : 'Not Completed'",
                        "\n        })}",
                        "\n",
                        "\n        ${Button({",
                        "\n            className: 'blue btn-update',",
                        "\n            content: 'Update'",
                        "\n        })}",
                        "\n",
                        "\n        ${Button({",
                        "\n            className: 'red btn-delete',",
                        "\n            content: 'Delete'",
                        "\n        })}",
                        "\n",
                        "\n    </div>",
                        "\n    `",
                        "\n}",
                        "\n",
                        "\n// Span component",
                        "\nfunction Span(props){",
                        "\n    return `<span class=\"${props.className}\">${props.content}</span>`",
                        "\n}",
                        "\n",
                        "\n// Button component",
                        "\nfunction Button(props) {",
                        "\n    return `",
                        "\n    <a class=\"ui ${props.className} button\">${props.content}</a>",
                        "\n    `",
                        "\n}",
                        "\n",
                        "\n// 新增 todo",
                        "\n$('.btn-add').click(() => {",
                        "\n    const content = $('.input-todo').val();",
                        "\n    if (!content) return;",
                        "\n    $('.input-todo').val('');",
                        "\n    axios.post(\"/api/add/\", ",
                        "\n        {",
                        "\n            \"title\": content",
                        "\n        },",
                        "\n        {",
                        "\n            headers: { ",
                        "\n            \"X-CSRFToken\": \"{{csrf_token}}\",",
                        "\n            },",
                        "\n        }",
                        "\n    )",
                        "\n    .then(response => {",
                        "\n        todo_id = response.data[\"todo_id\"]",
                        "\n        title = response.data[\"todo_title\"]",
                        "\n        complete = response.data[\"complete\"]",
                        "\n        // 更新 state",
                        "\n        updateState({",
                        "\n            todos: [...state.todos, {",
                        "\n                id: todo_id,",
                        "\n                content: title,",
                        "\n                isDone: complete",
                        "\n            }]",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n// 刪除 todo",
                        "\n$('.todos').on('click', '.btn-delete', e => {",
                        "\n    const id = Number($(e.target).parents('.todo').attr('data-id'));",
                        "\n    axios.get(\"/api/delete/\"+id)",
                        "\n    .then(response => {",
                        "\n        d_id = response.data[\"todo_id\"]",
                        "\n        updateState({",
                        "\n            todos: state.todos = state.todos.filter(todo => todo.id !== d_id)",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n// 未完成 <-> 已完成",
                        "\n$('.todos').on('click', '.btn-update', e => {",
                        "\n    const id = Number($(e.target).parents('.todo').attr('data-id'));",
                        "\n    axios.get(\"/api/update/\"+id)",
                        "\n    .then(response => {",
                        "\n        u_id = response.data[\"todo_id\"]",
                        "\n        complete = response.data[\"complete\"]",
                        "\n        updateState({",
                        "\n            todos: state.todos.map(todo => {",
                        "\n                if (todo.id !== u_id) return todo;",
                        "\n                return {",
                        "\n                ...todo,",
                        "\n                isDone: complete",
                        "\n                }",
                        "\n            })",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n"
                    ]
                },
                "跟上次相比是不是很不一樣，我自己覺得這樣子的寫法更加的直觀和易讀易懂！",
                "那我們一樣拆開來看，首先我們要生成Todo的component",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\n// Todo component",
                        "\nfunction Todo({id, content, isDone}) {",
                        "\n    return `",
                        "\n    <div class=\"ui segment todo\" data-id=\"${id}\">",
                        "\n        <p class=\"ui big header\"> ${id} | ${content} </p>",
                        "\n",
                        "\n        ${Span({",
                        "\n            className: isDone ? 'ui green label' : 'ui gray label',",
                        "\n            content: isDone ? 'Complete' : 'Not Completed'",
                        "\n        })}",
                        "\n",
                        "\n        ${Button({",
                        "\n            className: 'blue btn-update',",
                        "\n            content: 'Update'",
                        "\n        })}",
                        "\n",
                        "\n        ${Button({",
                        "\n            className: 'red btn-delete',",
                        "\n            content: 'Delete'",
                        "\n        })}",
                        "\n",
                        "\n    </div>",
                        "\n    `",
                        "\n}",
                        "\n",
                        "\n// Span component",
                        "\nfunction Span(props){",
                        "\n    return `<span class=\"${props.className}\">${props.content}</span>`",
                        "\n}",
                        "\n",
                        "\n// Button component",
                        "\nfunction Button(props) {",
                        "\n    return `",
                        "\n    <a class=\"ui ${props.className} button\">${props.content}</a>",
                        "\n    `",
                        "\n}",
                        "\n",
                        "\n"
                    ]
                },
                "我的Todo component裡面還包括了一個Span component和兩個Button component那他們會依據帶進去的參數而有不同的樣式",
                "接著再到get_all_list()",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\nlet state = {",
                        "\n    todos: []",
                        "\n}",
                        "\n",
                        "\nfunction get_all_list(){",
                        "\n    axios.get(\"/api/\")",
                        "\n        .then(response => {",
                        "\n            response.data.data.forEach(todo => {",
                        "\n                state = {",
                        "\n                    todos: [...state.todos, {",
                        "\n                        id: todo.id,",
                        "\n                        content: todo.title,",
                        "\n                        isDone: todo.complete",
                        "\n                    }]",
                        "\n                }",
                        "\n            })",
                        "\n            updateState(state)",
                        "\n        })",
                        "\n    }",
                        "\n",
                        "\n// 更新 state",
                        "\nfunction updateState(newState) {",
                        "\n    state = newState;",
                        "\n    render()",
                        "\n}",
                        "\n",
                        "\n// state => UI",
                        "\nfunction render() {",
                        "\n    // 先把畫面清空",
                        "\n    $('.todos').empty();",
                        "\n    console.log(state.todos)",
                        "\n    $('.todos').append(",
                        "\n    // 把每個 todo 的 HTML 集合起來放到畫面上",
                        "\n    state.todos.map(todo => Todo(todo)).join('')",
                        "\n    )",
                        "\n}",
                        "\n",
                        "\n"
                    ]
                },
                "一開始的狀態先給一個空array，在get_all_list()用axios去打api拿取現在所有的Todo datas，拿到datas後在一個一個把他們塞進去todos array裡面，最後再交由updateState去把現在的state更新掉然後render，render()的工作很簡單會先把現在html上所有的todos元素清空，然後在一筆一筆塞進去～",
                "再來我們來看看新增",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\n// 新增 todo",
                        "\n$('.btn-add').click(() => {",
                        "\n    const content = $('.input-todo').val();",
                        "\n    if (!content) return;",
                        "\n    $('.input-todo').val('');",
                        "\n    axios.post(\"/api/add/\", ",
                        "\n        {",
                        "\n            \"title\": content",
                        "\n        },",
                        "\n        {",
                        "\n            headers: { ",
                        "\n            \"X-CSRFToken\": \"{{csrf_token}}\",",
                        "\n            },",
                        "\n        }",
                        "\n    )",
                        "\n    .then(response => {",
                        "\n        todo_id = response.data[\"todo_id\"]",
                        "\n        title = response.data[\"todo_title\"]",
                        "\n        complete = response.data[\"complete\"]",
                        "\n        // 更新 state",
                        "\n        updateState({",
                        "\n            todos: [...state.todos, {",
                        "\n                id: todo_id,",
                        "\n                content: title,",
                        "\n                isDone: complete",
                        "\n            }]",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n"
                    ]
                },
                "很簡單的去判斷button有沒有沒click，然後取input的值丟axios，那response會回傳該todo的data，就把他updateState一次就OK了！",
                "接下來的修改和刪除也是同樣的概念，打api後response丟給updateState就完事啦～",
                {
                    "type": "code",
                    "language": "javascript",
                    "code": [
                        "\n// 刪除 todo",
                        "\n$('.todos').on('click', '.btn-delete', e => {",
                        "\n    const id = Number($(e.target).parents('.todo').attr('data-id'));",
                        "\n    axios.get(\"/api/delete/\"+id)",
                        "\n    .then(response => {",
                        "\n        d_id = response.data[\"todo_id\"]",
                        "\n        updateState({",
                        "\n            todos: state.todos = state.todos.filter(todo => todo.id !== d_id)",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n// 未完成 <-> 已完成",
                        "\n$('.todos').on('click', '.btn-update', e => {",
                        "\n    const id = Number($(e.target).parents('.todo').attr('data-id'));",
                        "\n    axios.get(\"/api/update/\"+id)",
                        "\n    .then(response => {",
                        "\n        u_id = response.data[\"todo_id\"]",
                        "\n        complete = response.data[\"complete\"]",
                        "\n        updateState({",
                        "\n            todos: state.todos.map(todo => {",
                        "\n                if (todo.id !== u_id) return todo;",
                        "\n                return {",
                        "\n                ...todo,",
                        "\n                isDone: complete",
                        "\n                }",
                        "\n            })",
                        "\n        })",
                        "\n    })",
                        "\n})",
                        "\n",
                        "\n"
                    ]
                },
                "刪除就是把存在state裡的todo id移除掉，而修改則是把該todo id抓出來改變他的isDone屬性。",
                "至此就大功告成啦，對Javascript不熟悉的我經過這個練習大概可以知道state component的概念！下次可能就是直接用react改寫看看囉！",
                "軟體和程式的世界真的很有趣，可以用不同的做法達到相同的目的，而且瞬息萬變，可能明天又能有新的東西可以學習，想想就興奮呢！！"
            ]
        }
    ]
}